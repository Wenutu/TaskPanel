name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Python 3.6 and 3.7 are not available on macos-latest (ARM64)
          - os: macos-latest
            python-version: '3.6'
          - os: macos-latest
            python-version: '3.7'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install pytest pytest-cov
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        # Use our relaxed flake8 config
        flake8 src/taskpanel tests/ --config=.flake8

    - name: Check code formatting with black
      run: |
        black --check --diff --line-length=88 src/taskpanel/ tests/ || echo "Code formatting could be improved"

    - name: Check import sorting with isort
      run: |
        isort --check --diff src/taskpanel/ tests/ || echo "Import sorting could be improved"

    - name: Install package
      run: |
        pip install -e .

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src/taskpanel --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security checks
      run: |
        bandit -r src/taskpanel/ -f json -o bandit-report.json || true
        bandit -r src/taskpanel/

    - name: Run safety checks
      run: |
        # Create a requirements file for safety to check
        pip freeze > requirements-freeze.txt
        safety check -r requirements-freeze.txt

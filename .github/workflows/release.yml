name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags starting with 'v'
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    # Use a Python 3.6 container for the entire build and release process.
    container: python:3.6-slim

    steps:
    - uses: actions/checkout@v4

    # NOTE: No setup-python or PPA steps are needed.
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Extract version from tag
      if: startsWith(github.ref, 'refs/tags/')
      # 'run' steps execute inside the container. $GITHUB_ENV is available.
      shell: bash
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "COMMIT_SHA=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Create src/taskpanel archive
      run: |
        cd src
        tar -czf ../taskpanel-src.tar.gz taskpanel/
        cd ..

    - name: Create GitHub Release and upload assets
      if: startsWith(github.ref, 'refs/tags/')
      # This action runs on the host but can access the 'dist' and '.tar.gz' files.
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
          taskpanel-src.tar.gz
        generate_release_notes: true
        name: Release ${{ env.TAG_NAME }}
        body: |
          ## 🚀 TaskPanel ${{ env.RELEASE_VERSION }}
          
          **Built on:** ${{ env.BUILD_DATE }}  
          **Commit:** [`${{ env.COMMIT_SHA }}`](https://github.com/Wenutu/TaskPanel/commit/${{ github.sha }})  
          **Python:** 3.6+ compatible
          
          ### 📦 Installation Options
          
          **From PyPI (Recommended):**
          ```bash
          pip install taskpanel==${{ env.RELEASE_VERSION }}
          ```
          
          **From GitHub Release:**
          ```bash
          # Install wheel package
          pip install https://github.com/Wenutu/TaskPanel/releases/download/${{ env.TAG_NAME }}/taskpanel-${{ env.RELEASE_VERSION }}-py3-none-any.whl
          
          # Or download and extract source
          wget https://github.com/Wenutu/TaskPanel/releases/download/${{ env.TAG_NAME }}/taskpanel-src.tar.gz
          tar -xzf taskpanel-src.tar.gz
          ```
          
          ### 📁 Available Downloads
          
          | File | Description | Use Case |
          |------|-------------|----------|
          | `taskpanel-${{ env.RELEASE_VERSION }}-py3-none-any.whl` | 🎯 **Python Wheel** | Standard installation via pip |
          | `taskpanel-${{ env.RELEASE_VERSION }}.tar.gz` | 📦 **Source Distribution** | Build from source, package managers |
          | `taskpanel-src.tar.gz` | 🗂️ **Pure Source Code** | Copy `src/taskpanel/` directly to your project |
          
          ### 🎯 Quick Start
          
          ```bash
          # Create task file
          echo "TaskName,Info,Build,Test" > tasks.csv
          echo "MyApp,v${{ env.RELEASE_VERSION }},./build.sh,./test.sh" >> tasks.csv
          
          # Run TaskPanel
          taskpanel tasks.csv
          ```
          
          ### 🔗 Links
          
          - [📚 Documentation](https://github.com/Wenutu/TaskPanel#readme)
          - [🐛 Report Issues](https://github.com/Wenutu/TaskPanel/issues)
          - [💡 Examples](https://github.com/Wenutu/TaskPanel/tree/main/examples)

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      # This command runs inside the container and uploads the built packages.
      run: |
        twine upload dist/*